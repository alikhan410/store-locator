<link href="{{ 'base.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'components.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'layout.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'form.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'responsive.css' | asset_url }}" rel="stylesheet">


<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script src="{{ 'haversineDistance.js' | asset_url }}" defer></script>

<div class="store-locator-wrapper">
  <h2 class="store-locator-heading">{{ block.settings.title }}</h2>

  <!-- Top Input Bar -->
  <form class="store-locator-form" onsubmit="return false;">
    <div class="input-container">
      <input
        type="text"
        id="user-location"
        placeholder="Your location" />
    </div>

    <select id="radius">
      <option value="5">5 km</option>
      <option value="10">10 km</option>
      <option value="25">25 km</option>
      <option value="50">50 km</option>
      <option value="100">100 km</option>
    </select>

    <button
      type="submit"
      id="search-btn"
      class="search-btn">Search</button>

    {% comment %} <!-- üìç Use My Location Button -->
    <button
      type="button"
      id="locate-btn"
      class="geo-btn">üìç Use My Location</button> {% endcomment %}
  </form>

  <!-- Grid Layout -->
  <div class="store-locator-grid">


    <!-- Store Results -->
    <div id="search-results" class="store-locator-results">
      <p>Search to see nearby stores...</p>
    </div>

    <!-- Leaflet Map -->
    <div id="store-map" class="store-locator-map"></div>
  </div>
</div>

<script>
  
  const locationInput = document.getElementById("user-location");
  const resultsEl = document.getElementById("search-results");
  const searchBtn = document.getElementById("search-btn")
  const radiusSelect = document.getElementById("radius");
  let stores;
  let map;
  let markers = [];
  let userCoords;
  
  
  function updateMapAndList(userCoords, stores, radiusKm) {
        console.log(stores)
        resultsEl.innerHTML = "";
        markers.forEach(m => map.removeLayer(m));
        markers = [];
  
        const bounds = [];
  
        const nearbyStores = stores.filter(store => {
          const dist = haversineDistance(userCoords.lat, userCoords.lng, store.lat, store.lng);
          store.distance = dist.toFixed(2);
          return dist <= radiusKm;
        });
  
        if (nearbyStores.length === 0) {
          resultsEl.innerHTML = "<p>No stores found within selected radius.</p>";
          return;
        }
  
        nearbyStores.sort((a, b) => a.distance - b.distance);
  
        nearbyStores.forEach(store => {
          const marker = L.marker([store.lat, store.lng]).addTo(map);
          marker.bindPopup(`<b>${store.name}</b><br>${store.address}<br>${store.distance} km`);
          markers.push(marker);
          bounds.push([store.lat, store.lng]);
          
          const formatName = name => name.toLowerCase().replace(/\b\w/g, c => c.toUpperCase());
          function toTitleCase(str) {
            if (!str) return "";
            return str
              .toLowerCase()
              .split(" ")
              .map(word => word.charAt(0).toUpperCase() + word.slice(1))
              .join(" ");
          }
  
          resultsEl.innerHTML += `
            <div class="store-result" data-lat="${store.lat}" data-lng="${store.lng}">
              <div class="store-name">${formatName(store.name)}</div>
              <div class="store-address">
                ${toTitleCase(store.address)}${store.address2 ? ', ' + toTitleCase(store.address2) : ''}, 
                ${toTitleCase(store.city)}, ${store.state.toUpperCase()} ${store.zip}
              </div>
              ${store.phone ? `<div class="store-phone">${store.phone}</div>` : ''}
              ${store.link ? `<div class="store-link"><a href="${store.link}" target="_blank" rel="noopener noreferrer">Store Website</a></div>` : ''}
              <div class="store-distance">${store.distance} km away</div>
            </div>
          `;
            
          });
  
        map.fitBounds(bounds, { padding: [50, 50] });
      }
  document.addEventListener("DOMContentLoaded", () => {
    const mapEl = document.getElementById("store-map");
    const locateBtn = document.getElementById("locate-btn");
  
  
    map = L.map(mapEl).setView([37.0902, -95.7129], 4);
   
  
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
  
    
  
    // locateBtn.addEventListener("click", () => {
    //   navigator.geolocation.getCurrentPosition(
    //     position => {
    //       const userCoords = {
    //         lat: position.coords.latitude,
    //         lng: position.coords.longitude
    //       };
    //       const radiusKm = parseInt(radiusSelect.value, 10);
  
    //       // fetch("{{ 'store_locations.json' | asset_url }}")
    //       //   .then(res => res.json())
    //       //   .then(data => {
    //       //     updateMapAndList(userCoords, data.stores, radiusKm);
    //       //   });
    //       fetch("/apps/store-locations")
    //         .then(res => res.json())
    //         .then(data => {
              
    //           updateMapAndList(userCoords, data.stores, radiusKm);
    //         });
    //     },
    //     error => {
    //       alert("Location access denied or unavailable.");
    //     }
    //   );
    // });
  
    searchBtn.addEventListener("click",()=>{
      suggestionBox.innerHTML = "";
      const radiusKm = parseInt(radiusSelect.value, 10);
  
      const query = locationInput.value.trim();
      if (!query || query.length < 3) {
        suggestionBox.innerHTML = "";
        return;
      }
  
      
      fetch(`https://photon.komoot.io/api/?q=${encodeURIComponent(query)}&limit=1`)
      .then(res => res.json())
      .then(data => {
        data.features.forEach(feature=>{
  
          userCoords = {
            lat: feature.geometry.coordinates[1],
            lng: feature.geometry.coordinates[0]
          };
        })
        // return fetch("{{ 'store_locations.json' | asset_url }}");
        // return fetch("/apps/store-locations");
        return fetch(`/apps/store-locations?query=${encodeURIComponent(query)}`)
      })
      .then(res => res.json())
      .then(data => {
      
        updateMapAndList(userCoords, data.stores, radiusKm);
  
        const storeEls = document.querySelectorAll(".store-result");
        storeEls.forEach(storeEl => {
          storeEl.addEventListener("click", () => {
            const lat = parseFloat(storeEl.dataset.lat);
            const lng = parseFloat(storeEl.dataset.lng);
  
            if (!isNaN(lat) && !isNaN(lng)) {
              map.setView([lat, lng], 17); // Move map to the store, zoom level 14
            }
                // Smooth scroll to the map
            const mapEl = document.getElementById("store-map");
            if (window.matchMedia("(max-width: 768px)").matches) {
              mapEl.scrollIntoView({ behavior: "smooth", block: "start" });
            }
          });
        });
      });
    } )
    
  
  });
  
  
  const suggestionBox = document.createElement("div");
  suggestionBox.className = "autocomplete-suggestions";
  locationInput.parentNode.appendChild(suggestionBox);
  
  
  let photonTimeout = null;
  
  locationInput.addEventListener("input", () => {
    const query = locationInput.value.trim();
    if (!query || query.length < 3) {
      suggestionBox.innerHTML = "";
      return;
    }
  
    clearTimeout(photonTimeout);
    photonTimeout = setTimeout(() => {
  
      fetch(`https://photon.komoot.io/api/?q=${encodeURIComponent(query)}&limit=5`)
        .then(res => res.json())
        .then(data => {
          suggestionBox.innerHTML = "";
          data.features.forEach(feature => {
            const item = document.createElement("div");
            item.className = "suggestion-item";
            item.textContent = feature.properties.name + (feature.properties.city ? `, ${feature.properties.city}` : "");
            
            item.addEventListener("click", () => {
              locationInput.value = item.textContent;
              suggestionBox.innerHTML = "";
  
              userCoords = {
                lat: feature.geometry.coordinates[1],
                lng: feature.geometry.coordinates[0]
              };
              const radiusKm = parseInt(radiusSelect.value, 10);
  
              // fetch("{{ 'stores.json' | asset_url }}")
              // fetch("/apps/store-locations")
              fetch(`/apps/store-locations?query=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                
                  updateMapAndList(userCoords, data.stores, radiusKm);
  
                  const storeEls = document.querySelectorAll(".store-result");
                  storeEls.forEach(storeEl => {
                    storeEl.addEventListener("click", () => {
                      const lat = parseFloat(storeEl.dataset.lat);
                      const lng = parseFloat(storeEl.dataset.lng);
            
                      if (!isNaN(lat) && !isNaN(lng)) {
                        map.setView([lat, lng], 17); // Move map to the store, zoom level 14
                      }
                          // Smooth scroll to the map
                      const mapEl = document.getElementById("store-map");
                      if (window.matchMedia("(max-width: 768px)").matches) {
                        mapEl.scrollIntoView({ behavior: "smooth", block: "start" });
                      }
                    });
                  });                  
                });
            });
            suggestionBox.appendChild(item);
          });
        });
    }, 300); // debounce
  });
</script>


{% schema %}
  {
    "name": "Store Locator",
    "target": "section",
    "settings": []
  }
{% endschema %}
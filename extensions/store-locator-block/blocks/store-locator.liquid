<link href="{{ 'base.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'components.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'layout.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'form.css' | asset_url }}" rel="stylesheet">
<link href="{{ 'responsive.css' | asset_url }}" rel="stylesheet">

<script src="{{ 'haversineDistance.js' | asset_url }}" defer></script>
<script
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA-v7tciOzqBeCk4tJZnof8_d0A7elVgs8&libraries=places"
  defer
></script>
<div class="store-locator-wrapper">
  {% if block.settings.show_heading %}
    <h2
      style="--heading-align: {{ block.settings.heading_horizontal_alignment }};"
      class="store-locator-heading"
    >
      {{ block.settings.heading }}
    </h2>
  {% endif %}
  {% if block.settings.show_content %}
    <p
      style="--content-align: {{ block.settings.content_horizontal_alignment }};"
      class="store-locator-content"
    >
      {{ block.settings.content }}
    </p>
  {% endif %}

  <!-- Top Input Bar -->
  <form class="store-locator-form" onsubmit="return false;">
    <div class="input-container">
      <input
        type="text"
        id="user-location"
        placeholder="{{ block.settings.search_bar_text }}"
      >
    </div>

    <select id="radius">
      <option value="5">5 km</option>
      <option value="10">10 km</option>
      <option value="25">25 km</option>
      <option value="50">50 km</option>
      <option value="100">100 km</option>
    </select>

    <button
      style="
        --search-btn-bg: {{ block.settings.search_btn_background }};
        --search-btn-hover-bg: {{ block.settings.search_btn_hover }};
        --search-btn-text: {{ block.settings.search_btn_text_color }};
        --search-btn-border-radius: {{ block.settings.search_btn_border_radius }}px;
      "
      type="submit"
      id="search-btn"
      class="search-btn"
    >
      Search
    </button>

    <!-- 📍 Use My Location Button -->
    <button
      style="
        --geo-btn-bg: {{ block.settings.geo_btn_background }};
        --geo-btn-hover-bg: {{ block.settings.geo_btn_hover }};
        --geo-btn-text: {{ block.settings.geo_btn_text_color }};
        --geo-btn-border-radius: {{ block.settings.geo_btn_border_radius }}px;
      "
      type="button"
      id="locate-btn"
      class="geo-btn"
    >
      {{ block.settings.geo_btn_text }}
    </button>
  </form>

  <!-- Grid Layout -->
  <div class="store-locator-grid">
    <!-- Store Results -->
    <div id="search-results" class="store-locator-results">
      <p>Search to see nearby stores...</p>
    </div>

    <!-- Leaflet Map -->
    <div id="store-map" class="store-locator-map"></div>
  </div>
</div>

<script>
  let locationInput;
  let resultsEl;
  let searchBtn;
  let radiusSelect;
  let suggestionBox;
  let map;
  let markers = [];
  let userCoords;

  const formatName = (name) => name.toLowerCase().replace(/\b\w/g, (c) => c.toUpperCase());
  const toTitleCase = (str) => {
    if (!str) return '';
    return str
      .toLowerCase()
      .split(' ')
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  };

  function updateMapAndList(userCoords, stores, radiusKm) {
    console.log(stores);
    resultsEl.innerHTML = '';

    if (markers.length) {
      markers.forEach((m) => m.setMap(null));
      markers = [];
    }

    const boundsObj = new google.maps.LatLngBounds();

    if (stores.length === 0) {
      resultsEl.innerHTML = '<p>No stores found within selected radius.</p>';
      return;
    }

    stores.forEach((store) => {
      const marker = new google.maps.Marker({
        position: { lat: store.lat, lng: store.lng },
        map,
        title: store.name,
      });

      const infoWindow = new google.maps.InfoWindow({
        content: `<b>${store.name}</b><br>${store.address}<br>${store.distance} km`,
      });

      marker.addListener('click', () => {
        infoWindow.open(map, marker);
      });

      markers.push(marker);
      boundsObj.extend(marker.getPosition());

      resultsEl.innerHTML += `
        <div class="store-result" data-lat="${store.lat}" data-lng="${store.lng}">
          <div class="store-name">${formatName(store.name)}</div>
          <div class="store-address">
            ${toTitleCase(store.address)}${store.address2 ? ', ' + toTitleCase(store.address2) : ''}, 
            ${toTitleCase(store.city)}, ${store.state.toUpperCase()} ${store.zip}
          </div>
          ${store.phone ? `<div class="store-phone">${store.phone}</div>` : ''}
          ${
            store.link
              ? `<div class="store-link"><a href="${store.link}" target="_blank" rel="noopener noreferrer">Store Website</a></div>`
              : ''
          }
          <div class="store-distance">${store.distance} km away</div>
        </div>
      `;
    });
    const storeEls = document.querySelectorAll('.store-result');
    storeEls.forEach((storeEl) => {
      storeEl.addEventListener('click', () => {
        const lat = parseFloat(storeEl.dataset.lat);
        const lng = parseFloat(storeEl.dataset.lng);

        if (!isNaN(lat) && !isNaN(lng)) {
          map.setCenter({ lat, lng });
          map.setZoom(19);
        }

        if (window.matchMedia('(max-width: 768px)').matches) {
          document.getElementById('store-map').scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });
    map.fitBounds(boundsObj);
  }

  document.addEventListener('DOMContentLoaded', () => {
    locationInput = document.getElementById('user-location');
    resultsEl = document.getElementById('search-results');
    searchBtn = document.getElementById('search-btn');
    radiusSelect = document.getElementById('radius');
    suggestionBox = document.createElement('div');
    const mapEl = document.getElementById('store-map');
    const locateBtn = document.getElementById('locate-btn');

    map = new google.maps.Map(mapEl, {
      center: { lat: 37.0902, lng: -95.7129 },
      zoom: 4,
    });

    const autocomplete = new google.maps.places.Autocomplete(locationInput, {
      types: ['geocode'],
    });

    autocomplete.addListener('place_changed', () => {
      const place = autocomplete.getPlace();
      if (!place.geometry || !place.geometry.location) return;

      userCoords = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      };

      const radiusKm = parseInt(radiusSelect.value, 10);

      // Show loading spinner
      resultsEl.innerHTML = `
        <div class="store-loading">
          <div class="spinner">&nbsp;</div>
          
        </div>
      `;

      fetch(`/apps/store-locations?lat=${userCoords.lat}&lng=${userCoords.lng}&radius=${radiusKm}`)
        .then((res) => res.json())
        .then((data) => {
          updateMapAndList(userCoords, data.stores, radiusKm);
        });
    });

    locateBtn.addEventListener('click', () => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          userCoords = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          const radiusKm = parseInt(radiusSelect.value, 10);

          // Show loading spinner
          resultsEl.innerHTML = `
            <div class="store-loading">
              <div class="spinner">&nbsp;</div>

            </div>
          `;

          fetch('/apps/store-locations')
            .then((res) => res.json())
            .then((data) => {
              updateMapAndList(userCoords, data.stores, radiusKm);
            });
        },
        (error) => {
          alert('Location access denied or unavailable.');
        }
      );
    });

    searchBtn.addEventListener('click', () => {
      suggestionBox.innerHTML = '';
      const radiusKm = parseInt(radiusSelect.value, 10);
      const query = locationInput.value.trim();

      if (!query || query.length < 3) {
        resultsEl.innerHTML = '<p>Please enter a location to search.</p>';
        return;
      }

      const geocoder = new google.maps.Geocoder();

      geocoder.geocode({ address: query }, (results, status) => {
        if (status === 'OK' && results[0]) {
          const loc = results[0].geometry.location;
          userCoords = { lat: loc.lat(), lng: loc.lng() };

          // Show loading spinner
          resultsEl.innerHTML = `
            <div class="store-loading">
              <div class="spinner">&nbsp;</div>
              
            </div>
          `;

          fetch(`/apps/store-locations?lat=${userCoords.lat}&lng=${userCoords.lng}&radius=${radiusKm}`)
            .then((res) => res.json())
            .then((data) => {
              updateMapAndList(userCoords, data.stores, radiusKm);
            });
        } else {
          resultsEl.innerHTML = '<p>Location not found. Try another search.</p>';
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Store Locator",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "Search Button"
    },
    {
      "type": "color",
      "id": "search_btn_background",
      "label": "Background",
      "default": "#f3a52c"
    },
    {
      "type": "color",
      "id": "search_btn_hover",
      "label": "hover background",
      "default": "#e18f1f"
    },
    {
      "type": "color",
      "id": "search_btn_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "search_btn_border_radius",
      "min": 0,
      "max": 32,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "header",
      "content": "Location Button"
    },
    {
      "type": "color",
      "id": "geo_btn_background",
      "label": "Background",
      "default": "#3ab636ff"
    },
    {
      "type": "color",
      "id": "geo_btn_hover",
      "label": "Hover background",
      "default": "#257035ff"
    },
    {
      "type": "color",
      "id": "geo_btn_text_color",
      "label": "Text color",
      "default": "#ffffff"
    },
    {
      "type": "range",
      "id": "geo_btn_border_radius",
      "min": 0,
      "max": 32,
      "step": 1,
      "unit": "px",
      "label": "Border radius",
      "default": 8
    },
    {
      "type": "text",
      "id": "geo_btn_text",
      "label": "Button text",
      "default": "Use My Location"
    },
    {
      "type": "header",
      "content": "Search Bar"
    },
    {
      "type": "text",
      "id": "search_bar_text",
      "label": "Search Bar Text",
      "default": "Your location"
    },
    {
      "type": "header",
      "content": "Heading"
    },
    {
      "type": "checkbox",
      "id": "show_heading",
      "label": "Show heading",
      "default": false
    },
    {
      "type": "select",
      "id": "heading_horizontal_alignment",
      "label": "Header alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Store Locator"
    },
    {
      "type": "header",
      "content": "Content"
    },
    {
      "type": "checkbox",
      "id": "show_content",
      "label": "Show content",
      "default": false
    },
    {
      "type": "select",
      "id": "content_horizontal_alignment",
      "label": "Text alignment",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left"
    },
    {
      "type": "textarea",
      "id": "content",
      "label": "Content",
      "default": "Find stores near you using the search bar below."
    }
  ]
}
{% endschema %}
